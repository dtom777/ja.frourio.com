"use strict";(self.webpackChunkfrourio_doc=self.webpackChunkfrourio_doc||[]).push([[3597],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,f=m["".concat(i,".").concat(d)]||m[d]||c[d]||s;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<s;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(3117),r=n(7294),s=n(2389),l=n(4726),o=n(6010),i="tabItem_LplD";function u(e){var t,n,s,u=e.lazy,p=e.block,c=e.defaultValue,m=e.values,d=e.groupId,f=e.className,k=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=m?m:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,l.lx)(b,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(t=null!=c?c:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(s=k[0])?void 0:s.props.value;if(null!==y&&!b.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,l.UB)(),h=g.tabGroupChoices,T=g.setTabGroupChoices,x=(0,r.useState)(y),w=x[0],N=x[1],O=[],P=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=h[d];null!=E&&E!==w&&b.some((function(e){return e.value===E}))&&N(E)}var C=function(e){var t=e.currentTarget,n=O.indexOf(t),a=b[n].value;a!==w&&(P(t),N(a),null!=d&&T(d,a))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=O.indexOf(e.currentTarget)+1;n=O[a]||O[0];break;case"ArrowLeft":var r=O.indexOf(e.currentTarget)-1;n=O[r]||O[O.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},f)},b.map((function(e){var t=e.value,n=e.label,s=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return O.push(e)},onKeyDown:j,onFocus:C,onClick:C},s,{className:(0,o.Z)("tabs__item",i,null==s?void 0:s.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),u?(0,r.cloneElement)(k.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function p(e){var t=(0,s.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},5304:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return m},default:function(){return f}});var a=n(3117),r=n(102),s=(n(7294),n(3905)),l=n(9877),o=n(8215),i=["components"],u={id:"post-tasks",title:"POST - /tasks"},p=void 0,c={unversionedId:"controller/post-tasks",id:"controller/post-tasks",title:"POST - /tasks",description:"<Tabs",source:"@site/docs/controller/post-tasks.mdx",sourceDirName:"controller",slug:"/controller/post-tasks",permalink:"/docs/controller/post-tasks",editUrl:"https://github.com/frouriojs/frourio.io/edit/master/docs/controller/post-tasks.mdx",tags:[],version:"current",frontMatter:{id:"post-tasks",title:"POST - /tasks"},sidebar:"someSidebar",previous:{title:"GET - /tasks/{taskId}",permalink:"/docs/controller/get-task-by-id"},next:{title:"Posting FormData",permalink:"/docs/controller/posting-formdata"}},m=[],d={toc:m};function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("br",null),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/types/index.ts"',title:'"server/types/index.ts"'},"export type Task = {\n  id: number\n  label: string\n  done: boolean\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/api/tasks/index.ts"',title:'"server/api/tasks/index.ts"'},"import { Task } from '$/types' // path alias $ -> server\n\nexport type Methods = {\n  post: {\n    reqBody: Pick<Task, 'label'>\n    status: 201 // optional\n    resBody: Task\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/api/tasks/controller.ts"',title:'"server/api/tasks/controller.ts"'},"import { defineController } from './$relay' // '$relay.ts' is automatically generated by frourio\nimport { createTask } from '$/service/tasks'\n\nexport default defineController(() => ({\n  post: async ({ body }) => {\n    const task = await createTask(body.label)\n\n    return { status: 201, body: task }\n  }\n}))\n")),(0,s.kt)(l.Z,{defaultValue:"prisma",values:[{label:"Prisma",value:"prisma"},{label:"TypeORM",value:"typeorm"},{label:"None",value:"none"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"prisma",mdxType:"TabItem"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema"},"Prisma schema")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="server/prisma/schema.prisma"',title:'"server/prisma/schema.prisma"'},"model Task {\n  id    Int     @id @default(autoincrement())\n  label String\n  done  Boolean @default(false)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/crud#create"},"Prisma#create")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/tasks.ts"',title:'"server/service/tasks.ts"'},"import { PrismaClient } from '@prisma/client'\nimport { Task } from '$prisma/client' // path alias $prisma -> ./node_modules/.prisma/*\n\nconst prisma = new PrismaClient()\n\nexport const createTask = (label: Task['label']) =>\n  prisma.task.create({ data: { label } })\n"))),(0,s.kt)(o.Z,{value:"typeorm",mdxType:"TabItem"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://typeorm.io/#/entities"},"TypeORM entities")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/entity/Task.ts"',title:'"server/entity/Task.ts"'},"import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm'\n\n@Entity()\nexport class Task {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ length: 100 })\n  label: string\n\n  @Column({ default: false })\n  done: boolean\n}\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://typeorm.io/#/repository-api"},"TypeORM#save")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/tasks.ts"',title:'"server/service/tasks.ts"'},"import { getRepository } from 'typeorm'\nimport { Task } from '$/entity/Task'\n\nconst taskRepository = () => getRepository(Task)\n\nexport const createTask = (label: Task['label']) => {\n  const task = new Task()\n  task.label = label\n  return taskRepository().save(task)\n}\n"))),(0,s.kt)(o.Z,{value:"none",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/tasks.ts"',title:'"server/service/tasks.ts"'},"import fs from 'fs'\nimport { Task } from '$/types'\n\ntype DB = {\n  nextId: number\n  tasks: Task[]\n}\n\nconst dbPath = 'database.json'\n\nconst readDB = async (): Promise<DB> =>\n  JSON.parse(await fs.promises.readFile(dbPath, 'utf8'))\nconst writeDB = (db: DB) =>\n  fs.promises.writeFile(dbPath, JSON.stringify(db), 'utf8')\n\nif (!fs.existsSync(dbPath)) {\n  fs.writeFileSync(dbPath, JSON.stringify({ nextId: 0, tasks: [] }), 'utf8')\n}\n\nexport const createTask = async (label: Task['label']) => {\n  const db = await readDB()\n  const task = { id: db.nextId, label, done: false }\n  await writeDB({ nextId: db.nextId + 1, tasks: [...db.tasks, task] })\n  return task\n}\n")))),(0,s.kt)(l.Z,{defaultValue:"next",values:[{label:"Next.js",value:"next"},{label:"Nuxt.js",value:"nuxt"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"next",mdxType:"TabItem"},(0,s.kt)("p",null,"Use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/aspida/aspida"},"aspida")," for the frontend HTTP client.",(0,s.kt)("br",{parentName:"p"}),"\n","(Frourio and aspida are maintained by the same developer)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/index.tsx"',title:'"pages/index.tsx"'},"import useAspidaSWR from '@aspida/swr'\nimport { apiClient } from '~/utils/apiClient'\n\nawait apiClient.tasks.post({ body: { label: 'new label' } })\n"))),(0,s.kt)(o.Z,{value:"nuxt",mdxType:"TabItem"},(0,s.kt)("p",null,"Use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/aspida/aspida"},"aspida")," for the frontend HTTP client.",(0,s.kt)("br",{parentName:"p"}),"\n","(Frourio and aspida are maintained by the same developer)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/index.vue"',title:'"pages/index.vue"'},"import Vue from 'vue'\n\nexport default Vue.extend({\n  async createTask() {\n    await this.$api.tasks.post({ body: { label: 'new label' } })\n  },\n})\n")))))}f.isMDXComponent=!0}}]);