"use strict";(self.webpackChunkfrourio_doc=self.webpackChunkfrourio_doc||[]).push([[1407],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return f}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(r),f=i,y=u["".concat(c,".").concat(f)]||u[f]||l[f]||o;return r?n.createElement(y,a(a({ref:t},d),{},{components:r})):n.createElement(y,a({ref:t},d))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5511:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return u}});var n=r(7462),i=r(3366),o=(r(7294),r(3905)),a=r(2719),s=["components"],c={id:"aspida",title:"Aspida"},p=void 0,d={unversionedId:"reference/aspida",id:"reference/aspida",title:"Aspida",description:"TypeScript friendly HTTP client wrapper for the browser and node.js.",source:"@site/docs/reference/aspida.mdx",sourceDirName:"reference",slug:"/reference/aspida",permalink:"/docs/reference/aspida",draft:!1,editUrl:"https://github.com/frouriojs/frourio.com/edit/master/docs/reference/aspida.mdx",tags:[],version:"current",frontMatter:{id:"aspida",title:"Aspida"},sidebar:"docs",previous:{title:"Setup with CUI",permalink:"/docs/reference/cfa/cui"},next:{title:"Controller",permalink:"/docs/reference/controller"}},l={},u=[{value:"Work within the Frourio ecosystem",id:"work-within-the-frourio-project",level:2},{value:"Types in Frourio",id:"types-in-frourio",level:2},{value:"Writing API Definitions",id:"writing-api-definitions",level:2}],f={toc:u};function y(e){var t=e.components,r=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{style:{textAlign:"center",padding:"16px"}},(0,o.kt)("img",{src:"https://aspida.github.io/aspida/logos/svg/black.svg",style:{width:"50%"}})),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("p",null,"TypeScript friendly HTTP client wrapper for the browser and node.js."),(0,o.kt)(a.Z,{href:"https://github.com/aspida/aspida","data-icon":"octicon-star","data-size":"large","data-show-count":!0,"aria-label":"Star aspida/aspida on GitHub",mdxType:"GitHubButton"},"Star")),(0,o.kt)("h2",{id:"work-within-the-frourio-project"},"Work within the Frourio ecosystem"),(0,o.kt)("p",null,"Aspida is a simple library that enables type-safe HTTP communication via TypeScript by wrapping clients such as fetch and axios. It generates a single object from a directory-based API types definition similar to Next.js."),(0,o.kt)("p",null,"Aspida was originally designed for the client-side, but Frourio expands type safety to the server-side by writing controllers and so on based on Aspida type definitions."),(0,o.kt)("p",null,"In short, Aspida works on client-side type safety within the Frourio ecosystem."),(0,o.kt)("h2",{id:"types-in-frourio"},"Types in Frourio"),(0,o.kt)("p",null,"Types defined as reqBody, reqHeaders, and query in the API type definition are included in the arguments of controllers, etc. Also, types defined as resBody and resHeaders must be returned from the controller."),(0,o.kt)("h2",{id:"writing-api-definitions"},"Writing API Definitions"),(0,o.kt)("p",null,"Please refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/aspida/aspida/tree/master/packages/aspida#readme"},"aspida's README")," for how to write API type definitions."))}y.isMDXComponent=!0}}]);