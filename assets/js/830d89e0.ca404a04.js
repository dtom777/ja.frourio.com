"use strict";(self.webpackChunkfrourio_doc=self.webpackChunkfrourio_doc||[]).push([[9934],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(n),m=s,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4274:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var r=n(7462),s=n(3366),i=(n(7294),n(3905)),o=["components"],a={id:"dependency-injection",title:"\u4f9d\u5b58\u6027\u306e\u6ce8\u5165"},c=void 0,l={unversionedId:"guide/dependency-injection",id:"guide/dependency-injection",title:"\u4f9d\u5b58\u6027\u306e\u6ce8\u5165",description:"Frourio \u3067\u306f\u4f9d\u5b58\u6027\u306e\u6ce8\u5165\u306b frouriojs/velona \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002",source:"@site/docs/guide/dependency-injection.md",sourceDirName:"guide",slug:"/guide/dependency-injection",permalink:"/docs/guide/dependency-injection",draft:!1,editUrl:"https://github.com/frouriojs/ja.frourio.com/edit/master/docs/guide/dependency-injection.md",tags:[],version:"current",frontMatter:{id:"dependency-injection",title:"\u4f9d\u5b58\u6027\u306e\u6ce8\u5165"},sidebar:"docs",previous:{title:"500 \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0",permalink:"/docs/guide/error-handling"},next:{title:"Pathpida \u3068 Next.js",permalink:"/docs/guide/pathpida/with-nextjs"}},p={},u=[],d={toc:u};function m(e){var t=e.components,n=(0,s.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Frourio \u3067\u306f\u4f9d\u5b58\u6027\u306e\u6ce8\u5165\u306b ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/frouriojs/velona"},"frouriojs/velona")," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/api/tasks/index.ts"',title:'"server/api/tasks/index.ts"'},"import { Task } from '$/types';\n\nexport type Methods = {\n  get: {\n    query?: {\n      limit?: number;\n      message?: string;\n    };\n\n    resBody: Task[];\n  };\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/tasks.ts"',title:'"server/service/tasks.ts"'},"import { PrismaClient } from '@prisma/client';\nimport { depend } from 'velona'; // dependency of frourio\nimport { Task } from '$/types';\n\nconst prisma = new PrismaClient();\n\nexport const getTasks = depend(\n  { prisma: prisma as { task: { findMany(): Promise<Task[]> } } }, // inject prisma\n  async (\n    { prisma },\n    limit?: number // prisma is injected object\n  ) => (await prisma.task.findMany()).slice(0, limit)\n);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/api/tasks/controller.ts"',title:'"server/api/tasks/controller.ts"'},"import { defineController } from './$relay';\nimport { getTasks } from '$/service/tasks';\n\nconst print = (text: string) => console.log(text);\n\nexport default defineController(\n  { getTasks, print }, // inject functions\n  ({ getTasks, print }) => ({\n    // getTasks and print are injected function\n    get: async ({ query }) => {\n      if (query?.message) print(query.message);\n\n      return { status: 200, body: await getTasks(query?.limit) };\n    },\n  })\n);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/test/server.test.ts"',title:'"server/test/server.test.ts"'},"import controller from '$/api/tasks/controller';\n\ntest('dependency injection into controller', async () => {\n  let printedMessage = '';\n\n  const injectedController = controller.inject((deps) => ({\n    getTasks: deps.getTasks.inject({\n      prisma: {\n        task: {\n          findMany: () =>\n            Promise.resolve([\n              { id: 0, label: 'task1', done: false },\n              { id: 1, label: 'task2', done: false },\n              { id: 2, label: 'task3', done: true },\n              { id: 3, label: 'task4', done: true },\n              { id: 4, label: 'task5', done: false },\n            ]),\n        },\n      },\n    }),\n    print: (text: string) => {\n      printedMessage = text;\n    },\n  }))();\n\n  const limit = 3;\n  const message = 'test message';\n  const res = await injectedController.get({\n    query: { limit, message },\n  });\n\n  expect(res.body).toHaveLength(limit);\n  expect(printedMessage).toBe(message);\n});\n")),(0,i.kt)("p",null,"Results"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm test\n\nPASS server/test/server.test.ts\n  \u2713 dependency injection into controller (4 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.67 s, estimated 8 s\nRan all test suites.\n")))}m.isMDXComponent=!0}}]);