(self.webpackChunkfrourio_doc=self.webpackChunkfrourio_doc||[]).push([[8564],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){"use strict";var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},1395:function(e,t,n){"use strict";n.d(t,{Z:function(){return c}});var r=n(7294),a=n(944),s=n(6010),i="tabItem_1uMI",o="tabItemActive_2DSg";var l=37,p=39;var c=function(e){var t=e.lazy,n=e.block,c=e.defaultValue,u=e.values,m=e.groupId,d=e.className,f=(0,a.Z)(),k=f.tabGroupChoices,y=f.setTabGroupChoices,v=(0,r.useState)(c),b=v[0],g=v[1],h=r.Children.toArray(e.children),T=[];if(null!=m){var x=k[m];null!=x&&x!==b&&u.some((function(e){return e.value===x}))&&g(x)}var N=function(e){var t=e.currentTarget,n=T.indexOf(t),r=u[n].value;g(r),null!=m&&(y(m,r),setTimeout((function(){var e,n,r,a,s,i,l,p;(e=t.getBoundingClientRect(),n=e.top,r=e.left,a=e.bottom,s=e.right,i=window,l=i.innerHeight,p=i.innerWidth,n>=0&&s<=p&&a<=l&&r>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(o),setTimeout((function(){return t.classList.remove(o)}),2e3))}),150))},O=function(e){var t,n;switch(e.keyCode){case p:var r=T.indexOf(e.target)+1;n=T[r]||T[0];break;case l:var a=T.indexOf(e.target)-1;n=T[a]||T[T.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},d)},u.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,className:(0,s.Z)("tabs__item",i,{"tabs__item--active":b===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:O,onFocus:N,onClick:N},n)}))),t?(0,r.cloneElement)(h.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==b})}))))}},9443:function(e,t,n){"use strict";var r=(0,n(7294).createContext)(void 0);t.Z=r},944:function(e,t,n){"use strict";var r=n(7294),a=n(9443);t.Z=function(){var e=(0,r.useContext)(a.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},5233:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=n(4034),a=n(9973),s=(n(7294),n(3905)),i=n(1395),o=n(8215),l={id:"get-task-by-id",title:"GET - /tasks/{taskId}"},p={unversionedId:"controller/get-task-by-id",id:"controller/get-task-by-id",isDocsHomePage:!1,title:"GET - /tasks/{taskId}",description:'`ts title="server/types/index.ts"',source:"@site/docs/controller/get-task-by-id.mdx",sourceDirName:"controller",slug:"/controller/get-task-by-id",permalink:"/docs/controller/get-task-by-id",editUrl:"https://github.com/frouriojs/frourio.io/edit/master/docs/controller/get-task-by-id.mdx",version:"current",frontMatter:{id:"get-task-by-id",title:"GET - /tasks/{taskId}"},sidebar:"someSidebar",previous:{title:"GET - /tasks?limit={number}",permalink:"/docs/controller/get-tasks"},next:{title:"POST - /tasks",permalink:"/docs/controller/post-tasks"}},c=[],u={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("br",null),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/types/index.ts"',title:'"server/types/index.ts"'},"export type Task = {\n  id: number\n  label: string\n  done: boolean\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/api/tasks/_taskId@number/index.ts"',title:'"server/api/tasks/_taskId@number/index.ts"'},"import { Task } from '$/types' // path alias $ -> server\n\nexport type Methods = {\n  get: {\n    resBody: Task\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/api/tasks/_taskId@number/controller.ts"',title:'"server/api/tasks/_taskId@number/controller.ts"'},"import { defineController } from './$relay' // '$relay.ts' is automatically generated by frourio\nimport { findTask } from '$/service/tasks'\n\nexport default defineController(() => ({\n  get: async ({ params }) => {\n    const task = await findTask(params.taskId)\n\n    return task ? { status: 200, body: task } : { status: 404 }\n  }\n}))\n")),(0,s.kt)(i.Z,{defaultValue:"prisma",values:[{label:"Prisma",value:"prisma"},{label:"TypeORM",value:"typeorm"},{label:"None",value:"none"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"prisma",mdxType:"TabItem"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema"},"Prisma schema")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="server/prisma/schema.prisma"',title:'"server/prisma/schema.prisma"'},"model Task {\n  id    Int     @id @default(autoincrement())\n  label String\n  done  Boolean @default(false)\n}\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/crud#findone"},"Prisma#findOne")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/tasks.ts"',title:'"server/service/tasks.ts"'},"import { PrismaClient } from '@prisma/client'\nimport { Task } from '$prisma/client' // path alias $prisma -> ./node_modules/.prisma/*\n\nconst prisma = new PrismaClient()\n\nexport const findTask = (id: Task['id']) => prisma.task.findOne({ where: { id }})\n"))),(0,s.kt)(o.Z,{value:"typeorm",mdxType:"TabItem"},(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://typeorm.io/#/entities"},"TypeORM entities")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/entity/Task.ts"',title:'"server/entity/Task.ts"'},"import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm'\n\n@Entity()\nexport class Task {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ length: 100 })\n  label: string\n\n  @Column({ default: false })\n  done: boolean\n}\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://typeorm.io/#/find-options"},"TypeORM#findOne")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/tasks.ts"',title:'"server/service/tasks.ts"'},"import { getRepository } from 'typeorm'\nimport { Task } from '$/entity/Task'\n\nconst taskRepository = () => getRepository(Task)\n\nexport const findTask = (id: Task['id']) => taskRepository().findOne(id)\n"))),(0,s.kt)(o.Z,{value:"none",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/tasks.ts"',title:'"server/service/tasks.ts"'},"import fs from 'fs'\nimport { Task } from '$/types'\n\ntype DB = {\n  nextId: number\n  tasks: Task[]\n}\n\nconst dbPath = 'database.json'\n\nconst readDB = async (): Promise<DB> =>\n  JSON.parse(await fs.promises.readFile(dbPath, 'utf8'))\n\nif (!fs.existsSync(dbPath)) {\n  fs.writeFileSync(dbPath, JSON.stringify({ nextId: 0, tasks: [] }), 'utf8')\n}\n\nexport const findTask = async (id: Task['id']) => (await readDB()).tasks.find(task => task.id === id)\n")))),(0,s.kt)(i.Z,{defaultValue:"next",values:[{label:"Next.js",value:"next"},{label:"Nuxt.js",value:"nuxt"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"next",mdxType:"TabItem"},(0,s.kt)("p",null,"Use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/aspida/aspida"},"aspida")," and ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/aspida/aspida/tree/master/packages/aspida-swr"},"@aspida/swr")," for the frontend HTTP client.",(0,s.kt)("br",{parentName:"p"}),"\n","(Frourio and aspida are maintained by the same developer)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/index.tsx"',title:'"pages/index.tsx"'},"import useAspidaSWR from '@aspida/swr'\nimport { apiClient } from '~/utils/apiClient'\n\nconst taskId = 1\nconst { data, error, mutate } = useAspidaSWR(apiClient.tasks._taskId(taskId))\n"))),(0,s.kt)(o.Z,{value:"nuxt",mdxType:"TabItem"},(0,s.kt)("p",null,"Use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/aspida/aspida"},"aspida")," for the frontend HTTP client.",(0,s.kt)("br",{parentName:"p"}),"\n","(Frourio and aspida are maintained by the same developer)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="pages/index.vue"',title:'"pages/index.vue"'},"import Vue from 'vue'\n\nexport default Vue.extend({\n  async fetch() {\n    const taskId = 1\n    this.task = await this.$api.tasks._taskId(taskId).$get()\n  },\n})\n")))))}m.isMDXComponent=!0},6010:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}function a(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}n.d(t,{Z:function(){return a}})}}]);