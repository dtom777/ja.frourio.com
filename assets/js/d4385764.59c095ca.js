(self.webpackChunkfrourio_doc=self.webpackChunkfrourio_doc||[]).push([[6852],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8215:function(e,t,n){"use strict";var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},1395:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var r=n(7294),a=n(944),i=n(6010),l="tabItem_1uMI",o="tabItemActive_2DSg";var s=37,p=39;var u=function(e){var t=e.lazy,n=e.block,u=e.defaultValue,m=e.values,c=e.groupId,d=e.className,f=(0,a.Z)(),k=f.tabGroupChoices,g=f.setTabGroupChoices,N=(0,r.useState)(u),h=N[0],y=N[1],b=r.Children.toArray(e.children),v=[];if(null!=c){var x=k[c];null!=x&&x!==h&&m.some((function(e){return e.value===x}))&&y(x)}var C=function(e){var t=e.currentTarget,n=v.indexOf(t),r=m[n].value;y(r),null!=c&&(g(c,r),setTimeout((function(){var e,n,r,a,i,l,s,p;(e=t.getBoundingClientRect(),n=e.top,r=e.left,a=e.bottom,i=e.right,l=window,s=l.innerHeight,p=l.innerWidth,n>=0&&i<=p&&a<=s&&r>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(o),setTimeout((function(){return t.classList.remove(o)}),2e3))}),150))},w=function(e){var t,n;switch(e.keyCode){case p:var r=v.indexOf(e.target)+1;n=v[r]||v[0];break;case s:var a=v.indexOf(e.target)-1;n=v[a]||v[v.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},d)},m.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:h===t?0:-1,"aria-selected":h===t,className:(0,i.Z)("tabs__item",l,{"tabs__item--active":h===t}),key:t,ref:function(e){return v.push(e)},onKeyDown:w,onFocus:C,onClick:C},n)}))),t?(0,r.cloneElement)(b.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==h})}))))}},9443:function(e,t,n){"use strict";var r=(0,n(7294).createContext)(void 0);t.Z=r},944:function(e,t,n){"use strict";var r=n(7294),a=n(9443);t.Z=function(){var e=(0,r.useContext)(a.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},3924:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var r=n(4034),a=n(9973),i=(n(7294),n(3905)),l=n(1395),o=n(8215),s={id:"posting-formdata",title:"Posting FormData"},p={unversionedId:"controller/posting-formdata",id:"controller/posting-formdata",isDocsHomePage:!1,title:"Posting FormData",description:'`ts title="server/api/user/_userId/index.ts"',source:"@site/docs/controller/posting-formdata.mdx",sourceDirName:"controller",slug:"/controller/posting-formdata",permalink:"/docs/controller/posting-formdata",editUrl:"https://github.com/frouriojs/frourio.io/edit/master/docs/controller/posting-formdata.mdx",version:"current",frontMatter:{id:"posting-formdata",title:"Posting FormData"},sidebar:"someSidebar",previous:{title:"POST - /tasks",permalink:"/docs/controller/post-tasks"},next:{title:"Hooks types and lifecycle",permalink:"/docs/hooks/lifecycle"}},u=[],m={toc:u};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/api/user/_userId/index.ts"',title:'"server/api/user/_userId/index.ts"'},"export type Methods = {\n  post: {\n    reqFormat: FormData // required\n    reqBody: { icon: Blob }\n    status: 204 // optional\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/api/user/_userId/controller.ts"',title:'"server/api/user/_userId/controller.ts"'},"import { defineController } from './$relay'\nimport { changeIcon } from '$/service/user'\n\nexport default defineController(() => ({\n  post: async ({ params, body }) => {\n    await changeIcon(params.userId, body.icon)\n\n    return { status: 204 }\n  }\n}))\n")),(0,i.kt)(l.Z,{defaultValue:"fastify",values:[{label:"fastify",value:"fastify"},{label:"express",value:"express"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"fastify",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/user.ts"',title:'"server/service/user.ts"'},"import fs from 'fs'\nimport path from 'path'\nimport { Multipart } from 'fastify-multipart'\n\nexport const changeIcon = async (id: string, iconFile: Multipart) => {\n  const iconName = `${Date.now()}${path.extname(iconFile.filename)}`\n\n  await fs.promises.writeFile(\n    path.resolve('public/icons', id, iconName),\n    await iconFile.toBuffer()\n  )\n}\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-multipart#usage"},"fastify-multipart")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/app.ts"',title:'"server/service/app.ts"'},"import Fastify from 'fastify'\nimport server from './$server' // '$server.ts' is automatically generated by frourio\n\nconst fastify = Fastify()\n\nserver(fastify, { basePath: '/api/v1', multipart: { fileSize: 1024 ** 3 } })\nfastify.listen(3000)\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mscdex/busboy#busboy-methods"},"Multipart options"))),(0,i.kt)(o.Z,{value:"express",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/service/user.ts"',title:'"server/service/user.ts"'},"import fs from 'fs'\nimport path from 'path'\nimport { MulterFile } from '$/$server'\n\nexport const changeIcon = async (id: string, iconFile: MulterFile) => {\n  const iconName = `${Date.now()}${path.extname(iconFile.originalname)}`\n\n  await fs.promises.copyFile(iconFile.path, path.resolve('public/icons', id, iconName))\n  await fs.promises.unlink(iconFile.path)\n}\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/expressjs/multer#file-information"},"MulterFile information")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Note"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fieldname")),(0,i.kt)("td",{parentName:"tr",align:null},"Field name specified in the form"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"originalname")),(0,i.kt)("td",{parentName:"tr",align:null},"Name of the file on the user's computer"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"encoding")),(0,i.kt)("td",{parentName:"tr",align:null},"Encoding type of the file"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"mimetype")),(0,i.kt)("td",{parentName:"tr",align:null},"Mime type of the file"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"size")),(0,i.kt)("td",{parentName:"tr",align:null},"Size of the file in bytes"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"destination")),(0,i.kt)("td",{parentName:"tr",align:null},"The folder to which the file has been saved"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"DiskStorage"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"filename")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the file within the ",(0,i.kt)("inlineCode",{parentName:"td"},"destination")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"DiskStorage"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"path")),(0,i.kt)("td",{parentName:"tr",align:null},"The full path to the uploaded file"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"DiskStorage"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"buffer")),(0,i.kt)("td",{parentName:"tr",align:null},"A ",(0,i.kt)("inlineCode",{parentName:"td"},"Buffer")," of the entire file"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"MemoryStorage"))))),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="server/entrypoints/index.ts"',title:'"server/entrypoints/index.ts"'},"import express from 'express'\nimport server from './$server' // '$server.ts' is automatically generated by frourio\n\nconst app = express()\n\nserver(app, { basePath: '/api/v1', multer: { limits: { fileSize: 1024 ** 3 } } })\napp.listen(3000)\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/expressjs/multer#multeropts"},"Multer options")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dest")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"storage")),(0,i.kt)("td",{parentName:"tr",align:null},"Where to store the files"),(0,i.kt)("td",{parentName:"tr",align:null},"path.join(__dirname, '.upload')")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fileFilter")),(0,i.kt)("td",{parentName:"tr",align:null},"Function to control which files are accepted"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"limits")),(0,i.kt)("td",{parentName:"tr",align:null},"Limits of the uploaded data"),(0,i.kt)("td",{parentName:"tr",align:null},"{ fileSize: 1024 ** 3 }")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"preservePath")),(0,i.kt)("td",{parentName:"tr",align:null},"Keep the full path of files instead of just the base name"),(0,i.kt)("td",{parentName:"tr",align:null})))))),(0,i.kt)(l.Z,{defaultValue:"next",values:[{label:"Next.js",value:"next"},{label:"Nuxt.js",value:"nuxt"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"next",mdxType:"TabItem"},(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aspida/aspida"},"aspida")," for the frontend HTTP client.",(0,i.kt)("br",{parentName:"p"}),"\n","(Frourio and aspida are maintained by the same developer)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/UserBanner.tsx"',title:'"components/UserBanner.tsx"'},"import { useCallback, ChangeEvent } from 'react'\nimport { apiClient } from '~/utils/apiClient'\n\nconst UserBanner = () => {\n  const editIcon = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      if (!e.target.files?.length) return\n\n      await apiClient.user._userId(1).$post({\n        body: { icon: e.target.files[0] }\n      })\n    },\n    []\n  )\n\n  return <input type=\"file\" accept=\"image/*\" onChange={editIcon} />\n}\n\nexport default UserBanner\n"))),(0,i.kt)(o.Z,{value:"nuxt",mdxType:"TabItem"},(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/aspida/aspida"},"aspida")," for the frontend HTTP client.",(0,i.kt)("br",{parentName:"p"}),"\n","(Frourio and aspida are maintained by the same developer)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="components/UserBanner.vue"',title:'"components/UserBanner.vue"'},"import Vue from 'vue'\n\nexport default Vue.extend({\n  methods: {\n    async editIcon(e: { target: HTMLInputElement }) {\n      if (!e.target?.files?.length) return\n\n      await this.$api.user._userId(1).$post({\n        body: { icon: e.target.files[0] }\n      })\n    },\n  }\n})\n")))))}c.isMDXComponent=!0},6010:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}function a(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}n.d(t,{Z:function(){return a}})}}]);