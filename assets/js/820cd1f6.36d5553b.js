"use strict";(self.webpackChunkfrourio_doc=self.webpackChunkfrourio_doc||[]).push([[10],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=o(n),g=r,m=c["".concat(s,".").concat(g)]||c[g]||d[g]||p;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,i=new Array(p);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var o=2;o<p;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9686:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var a=n(7462),r=n(3366),p=(n(7294),n(3905)),i=n(2719),l=["components"],s={id:"with-nextjs",title:"Pathpida \u3068 Next.js"},o=void 0,u={unversionedId:"guide/pathpida/with-nextjs",id:"guide/pathpida/with-nextjs",title:"Pathpida \u3068 Next.js",description:"<img",source:"@site/docs/guide/pathpida/with-nextjs.mdx",sourceDirName:"guide/pathpida",slug:"/guide/pathpida/with-nextjs",permalink:"/docs/guide/pathpida/with-nextjs",draft:!1,editUrl:"https://github.com/frouriojs/ja.frourio.com/edit/master/docs/guide/pathpida/with-nextjs.mdx",tags:[],version:"current",frontMatter:{id:"with-nextjs",title:"Pathpida \u3068 Next.js"},sidebar:"docs",previous:{title:"\u4f9d\u5b58\u6027\u306e\u6ce8\u5165",permalink:"/docs/guide/dependency-injection"},next:{title:"Pathpida \u3068 Nuxt.js",permalink:"/docs/guide/pathpida/with-nuxtjs"}},c={},d=[{value:"\u7279\u5fb4",id:"features",level:2},{value:"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb",id:"install",level:2},{value:"\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7",id:"setup",level:2},{value:"\u4f7f\u3044\u65b9",id:"usage",level:2},{value:"\u30af\u30a8\u30ea\u306e\u5b9a\u7fa9",id:"define-query",level:2},{value:"\u9759\u7684\u30d1\u30b9\u306e\u751f\u6210",id:"static-path",level:2}],g={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,p.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("div",{style:{textAlign:"center",padding:"16px",marginTop:"64px"}},(0,p.kt)("img",{src:"https://aspida.github.io/pathpida/logos/svg/black.svg#gh-light-mode-only",style:{width:"50%",minWidth:"250px"},alt:"pathpida logo"}),(0,p.kt)("img",{src:"https://aspida.github.io/pathpida/logos/svg/white.svg#gh-dark-mode-only",style:{width:"50%",minWidth:"250px"},alt:"pathpida logo"})),(0,p.kt)("div",{style:{textAlign:"center"}},(0,p.kt)("p",null,"TypeScript friendly internal link client for Next.js."),(0,p.kt)(i.Z,{href:"https://github.com/aspida/pathpida","data-icon":"octicon-star","data-size":"large","data-show-count":!0,"aria-label":"Star aspida/pathpida on GitHub",mdxType:"GitHubButton"},"Star")),(0,p.kt)("h2",{id:"features"},"\u7279\u5fb4"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"\u578b\u5b89\u5168"),"\u3002Next.js \u3067\u5185\u90e8\u30ea\u30f3\u30af\u3092\u53d6\u308a\u6271\u3046\u305f\u3081\u306e\u578b\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3057\u307e\u3059\u3002"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"\u8a2d\u5b9a\u4e0d\u8981"),"\u3002\u8a2d\u5b9a\u3092\u5fc5\u8981\u3068\u305b\u305a\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u3059\u3050\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002"),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("strong",{parentName:"li"},"\u5b9f\u884c\u6642\u8ca0\u8377\u7121\u3057"),"\u3002\u30e9\u30f3\u30bf\u30a4\u30e0\u30b3\u30fc\u30c9\u304c\u30d0\u30f3\u30c9\u30eb\u306b\u542b\u307e\u308c\u306a\u3044\u306e\u3067\u8efd\u91cf\u3067\u3059\u3002")),(0,p.kt)("h2",{id:"install"},"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("a",{parentName:"p",href:"https://www.npmjs.com/"},"npm")," \u3092\u4f7f\u7528:"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm install pathpida --save-dev\n"))),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("p",{parentName:"li"},(0,p.kt)("a",{parentName:"p",href:"https://yarnpkg.com/"},"Yarn")," \u3092\u4f7f\u7528:"),(0,p.kt)("pre",{parentName:"li"},(0,p.kt)("code",{parentName:"pre",className:"language-sh"},"$ yarn add pathpida --dev\n")))),(0,p.kt)("h2",{id:"setup"},"\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"package.json")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "dev:pathpida": "pathpida --watch",\n    "build:client": "pathpida && aspida && next build",\n    "build:types": "pathpida && aspida && npm run build:frourio --prefix server"\n  }\n}\n')),(0,p.kt)("h2",{id:"usage"},"\u4f7f\u3044\u65b9"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"pages/index.tsx\npages/post/create.tsx\npages/post/[pid].tsx\npages/post/[...slug].tsx\n\nutils/$path.ts // Generated automatically by pathpida\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"pages/index.tsx")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-tsx"},"import Link from 'next/link';\nimport { pagesPath } from '~/utils/$path';\n\nconsole.log(pagesPath.post.create.$url()); // { pathname: '/post/create' }\nconsole.log(pagesPath.post._pid(1).$url()); // { pathname: '/post/[pid]', query: { pid: 1 }}\nconsole.log(pagesPath.post._slug(['a', 'b', 'c']).$url()); // { pathname: '/post//[...slug]', query: { slug: ['a', 'b', 'c'] }}\n\nexport default () => {\n  const onclick = useCallback(() => {\n    router.push(pagesPath.post._pid(1).$url());\n  }, []);\n\n  return (\n    <>\n      <Link href={pagesPath.post._slug(['a', 'b', 'c']).$url()} />\n      <div onclick={onclick} />\n    </>\n  );\n};\n")),(0,p.kt)("h2",{id:"define-query"},"\u30af\u30a8\u30ea\u306e\u5b9a\u7fa9"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"pages/post/create.tsx")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-tsx"},"export type Query = {\n  userId: number;\n  name?: string;\n};\n\nexport default () => <div />;\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"pages/post/[pid].tsx")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-tsx"},"export type OptionalQuery = {\n  limit: number;\n  label?: string;\n};\n\nexport default () => <div />;\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"pages/index.tsx")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-tsx"},"import Link from 'next/link';\nimport { pagesPath } from '~/utils/$path';\n\nconsole.log(pagesPath.post.create.$url({ query: { userId: 1 } })); // { pathname: '/post/create', query: { userId: 1 }}\nconsole.log(pagesPath.post.create.$url()); // type error\nconsole.log(pagesPath.post._pid(1).$url()); // { pathname: '/post/[pid]', query: { pid: 1 }}\nconsole.log(pagesPath.post._pid(1).$url({ query: { limit: 10 }, hash: 'sample' })); // { pathname: '/post/[pid]', query: { pid: 1, limit: 10 }, hash: 'sample' }\n\nexport default () => {\n  const onclick = useCallback(() => {\n    router.push(pagesPath.post._pid(1).$url());\n  }, []);\n\n  return (\n    <>\n      <Link href={pagesPath.post._slug(['a', 'b', 'c']).$url()} />\n      <div onclick={onclick} />\n    </>\n  );\n};\n")),(0,p.kt)("h2",{id:"static-path"},"\u9759\u7684\u30d1\u30b9\u306e\u751f\u6210"),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"package.json")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "dev:pathpida": "pathpida --enableStatic --watch",\n    "build:client": "pathpida --enableStatic && aspida && next build",\n    "build:types": "pathpida --enableStatic && aspida && npm run build:frourio --prefix server"\n  }\n}\n')),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"pages/index.tsx\npages/post/create.tsx\npages/post/[pid].tsx\npages/post/[...slug].tsx\n\npublic/aa.json\npublic/bb/cc.png\n\nutils/$path.ts // Generated automatically by pathpida\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"pages/index.tsx")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-tsx"},"import Link from 'next/link';\nimport { pagesPath, staticPath } from '~/utils/$path';\n\nconsole.log(staticPath.aa_json); // /aa.json\n\nexport default () => {\n  return (\n    <>\n      <Link href={pagesPath.post._slug(['a', 'b', 'c']).$url()} />\n      <img src={staticPath.bb.cc_png} />\n    </>\n  );\n};\n")))}m.isMDXComponent=!0}}]);