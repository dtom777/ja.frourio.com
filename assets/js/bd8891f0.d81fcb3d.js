"use strict";(self.webpackChunkfrourio_doc=self.webpackChunkfrourio_doc||[]).push([[2906],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return t?r.createElement(f,u(u({ref:n},c),{},{components:t})):r.createElement(f,u({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,u=new Array(o);u[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,u[1]=l;for(var s=2;s<o;s++)u[s]=t[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return u}});var r=t(7294),a=t(6010),o="tabItem_Ymn6";function u(e){var n=e.children,t=e.hidden,u=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,u),hidden:t},n)}},5488:function(e,n,t){t.d(n,{Z:function(){return d}});var r=t(7462),a=t(7294),o=t(6010),u=t(2389),l=t(7392),i=t(7094),s=t(2466),c="tabList__CuJ",p="tabItem_LNqP";function m(e){var n,t,u=e.lazy,m=e.block,d=e.defaultValue,f=e.values,v=e.groupId,h=e.className,y=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=f?f:y.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),g=(0,l.l)(b,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===d?d:null!=(n=null!=d?d:null==(t=y.find((function(e){return e.props.default})))?void 0:t.props.value)?n:y[0].props.value;if(null!==k&&!b.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,i.U)(),T=w.tabGroupChoices,E=w.setTabGroupChoices,O=(0,a.useState)(k),I=O[0],_=O[1],j=[],N=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=v){var P=T[v];null!=P&&P!==I&&b.some((function(e){return e.value===P}))&&_(P)}var x=function(e){var n=e.currentTarget,t=j.indexOf(n),r=b[t].value;r!==I&&(N(n),_(r),null!=v&&E(v,String(r)))},A=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r,a=j.indexOf(e.currentTarget)+1;t=null!=(r=j[a])?r:j[0];break;case"ArrowLeft":var o,u=j.indexOf(e.currentTarget)-1;t=null!=(o=j[u])?o:j[j.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},h)},b.map((function(e){var n=e.value,t=e.label,u=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:I===n?0:-1,"aria-selected":I===n,key:n,ref:function(e){return j.push(e)},onKeyDown:A,onFocus:x,onClick:x},u,{className:(0,o.Z)("tabs__item",p,null==u?void 0:u.className,{"tabs__item--active":I===n})}),null!=t?t:n)}))),u?(0,a.cloneElement)(y.filter((function(e){return e.props.value===I}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==I})}))))}function d(e){var n=(0,u.Z)();return a.createElement(m,(0,r.Z)({key:String(n)},e))}},2690:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),u=t(5488),l=t(5162),i=["components"],s={id:"ci",title:"Continuous Integration"},c=void 0,p={unversionedId:"guide/deployments/ci",id:"guide/deployments/ci",title:"Continuous Integration",description:"Here are the five commands you need to run for Frourio testing!",source:"@site/docs/guide/deployments/ci.mdx",sourceDirName:"guide/deployments",slug:"/guide/deployments/ci",permalink:"/docs/guide/deployments/ci",draft:!1,editUrl:"https://github.com/frouriojs/frourio.com/edit/master/docs/guide/deployments/ci.mdx",tags:[],version:"current",frontMatter:{id:"ci",title:"Continuous Integration"},sidebar:"docs",previous:{title:"Pathpida with Nuxt.js",permalink:"/docs/guide/pathpida/with-nuxtjs"},next:{title:"Client Static Hosting",permalink:"/docs/guide/deployments/client"}},m={},d=[{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:2}],f={toc:d};function v(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Here are the five commands you need to run for Frourio testing!\nYou can run them wherever you like."),(0,o.kt)(u.Z,{defaultValue:"npm",groupId:"package-manager",values:[{label:"npm",value:"npm"},{label:"yarn",value:"yarn"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm install\nnpm install --prefix server\nnpm run lint\nnpm run typecheck\nnpm test\n"))),(0,o.kt)(l.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn install\nyarn install --cwd server\nyarn lint\nyarn typecheck\nyarn test\n")))),(0,o.kt)("h2",{id:"github-actions-workflow"},"GitHub Actions Workflow"),(0,o.kt)("p",null,"For reference, the following workflow will be generated in ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows/test.yml")," if you select GItHub Actions in CI config when you create a project."),(0,o.kt)("p",null,"Since the workflow will vary depending on your configuration, we recommend that you use create-frourio-app to generate a workflow that fits your configuration."),(0,o.kt)(u.Z,{defaultValue:"npm",groupId:"package-manager",values:[{label:"npm",value:"npm"},{label:"yarn",value:"yarn"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".github/workflows/test.yml"',title:'".github/workflows/test.yml"'},"name: Test\n\non: push\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    env:\n      API_SERVER_PORT: 8080\n      API_ORIGIN: http://localhost:8080\n      API_BASE_PATH: /api\n    steps:\n      - uses: actions/checkout@v2\n      - name: setup Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: 14\n      - uses: actions/cache@v2\n        id: client-npm-cache\n        with:\n          path: 'node_modules'\n          key: client-npm-${{ hashFiles('package-lock.json') }}\n      - uses: actions/cache@v2\n        id: server-npm-cache\n        with:\n          path: 'server/node_modules'\n          key: server-npm-${{ hashFiles('server/package-lock.json') }}\n      - run: npm install\n        if: steps.client-npm-cache.outputs.cache-hit != 'true'\n      - run: npm install --prefix server\n        if: steps.server-npm-cache.outputs.cache-hit != 'true'\n      - run: npm run lint\n      - run: |\n          sudo systemctl start mysql.service\n          echo \"DATABASE_URL=mysql://root:root@localhost:3306/test\" > server/prisma/.env\n      - run: npm run typecheck\n      - run: |\n          npm run migrate:dev\n          npm test\n        env:\n          API_JWT_SECRET: test_secret\n"))),(0,o.kt)(l.Z,{value:"yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".github/workflows/test.yml"',title:'".github/workflows/test.yml"'},"name: Test\n\non: push\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    env:\n      API_SERVER_PORT: 8080\n      API_ORIGIN: http://localhost:8080\n      API_BASE_PATH: /api\n    steps:\n      - uses: actions/checkout@v2\n      - name: setup Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: 14\n      - uses: actions/cache@v2\n        id: client-yarn-cache\n        with:\n          path: 'node_modules'\n          key: client-yarn-${{ hashFiles('yarn.lock') }}\n      - uses: actions/cache@v2\n        id: server-yarn-cache\n        with:\n          path: 'server/node_modules'\n          key: server-yarn-${{ hashFiles('server/yarn.lock') }}\n      - run: yarn install\n        if: steps.client-yarn-cache.outputs.cache-hit != 'true'\n      - run: yarn install --cwd server\n        if: steps.server-yarn-cache.outputs.cache-hit != 'true'\n      - run: yarn run lint\n      - run: |\n          sudo systemctl start mysql.service\n          echo \"DATABASE_URL=mysql://root:root@localhost:3306/test\" > server/prisma/.env\n      - run: yarn run typecheck\n      - run: |\n          yarn run migrate:dev\n          yarn test\n        env:\n          API_JWT_SECRET: test_secret\n")))))}v.isMDXComponent=!0}}]);